<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PCAMainViewController.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PCAMainViewController</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
            
			
			<NodeRef refid="30"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/logoutPressed:</TokenIdentifier>
			<Abstract type="html">Called when logout button pressed</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>- (IBAction)logoutPressed:(id)sender</Declaration>
			
			
			<Anchor>//api/name/logoutPressed:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setCurrentSymptom:</TokenIdentifier>
			<Abstract type="html">Reflects the current symptom during symptom iteration</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property int currentSymptom</Declaration>
			
			
			<Anchor>//api/name/currentSymptom</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/currentSymptom</TokenIdentifier>
			<Abstract type="html">Reflects the current symptom during symptom iteration</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property int currentSymptom</Declaration>
			
			
			<Anchor>//api/name/currentSymptom</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/currentSymptom</TokenIdentifier>
			<Abstract type="html">Reflects the current symptom during symptom iteration</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property int currentSymptom</Declaration>
			
			
			<Anchor>//api/name/currentSymptom</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setValueToSave:</TokenIdentifier>
			<Abstract type="html">Holds the value to be saved as the UILabel will be inaccessible during saving</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property double valueToSave</Declaration>
			
			
			<Anchor>//api/name/valueToSave</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/valueToSave</TokenIdentifier>
			<Abstract type="html">Holds the value to be saved as the UILabel will be inaccessible during saving</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property double valueToSave</Declaration>
			
			
			<Anchor>//api/name/valueToSave</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/valueToSave</TokenIdentifier>
			<Abstract type="html">Holds the value to be saved as the UILabel will be inaccessible during saving</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property double valueToSave</Declaration>
			
			
			<Anchor>//api/name/valueToSave</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setAppDel:</TokenIdentifier>
			<Abstract type="html">AppDelegate object used to reference defObj for static functions</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property PCAAppDelegate *appDel</Declaration>
			
			
			<Anchor>//api/name/appDel</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/appDel</TokenIdentifier>
			<Abstract type="html">AppDelegate object used to reference defObj for static functions</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property PCAAppDelegate *appDel</Declaration>
			
			
			<Anchor>//api/name/appDel</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/appDel</TokenIdentifier>
			<Abstract type="html">AppDelegate object used to reference defObj for static functions</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property PCAAppDelegate *appDel</Declaration>
			
			
			<Anchor>//api/name/appDel</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setEsasDictionary:</TokenIdentifier>
			<Abstract type="html">The dictionary of new symptoms to be saved</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSMutableDictionary *esasDictionary</Declaration>
			
			
			<Anchor>//api/name/esasDictionary</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/esasDictionary</TokenIdentifier>
			<Abstract type="html">The dictionary of new symptoms to be saved</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSMutableDictionary *esasDictionary</Declaration>
			
			
			<Anchor>//api/name/esasDictionary</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/esasDictionary</TokenIdentifier>
			<Abstract type="html">The dictionary of new symptoms to be saved</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSMutableDictionary *esasDictionary</Declaration>
			
			
			<Anchor>//api/name/esasDictionary</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setUrgentDictionary:</TokenIdentifier>
			<Abstract type="html">The dictionary of urgent symptoms to be saved</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSMutableDictionary *urgentDictionary</Declaration>
			
			
			<Anchor>//api/name/urgentDictionary</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/urgentDictionary</TokenIdentifier>
			<Abstract type="html">The dictionary of urgent symptoms to be saved</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSMutableDictionary *urgentDictionary</Declaration>
			
			
			<Anchor>//api/name/urgentDictionary</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/urgentDictionary</TokenIdentifier>
			<Abstract type="html">The dictionary of urgent symptoms to be saved</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSMutableDictionary *urgentDictionary</Declaration>
			
			
			<Anchor>//api/name/urgentDictionary</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setMostRecent:</TokenIdentifier>
			<Abstract type="html">The most recent CatalyzeEntry</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property CatalyzeEntry *mostRecent</Declaration>
			
			
			<Anchor>//api/name/mostRecent</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/mostRecent</TokenIdentifier>
			<Abstract type="html">The most recent CatalyzeEntry</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property CatalyzeEntry *mostRecent</Declaration>
			
			
			<Anchor>//api/name/mostRecent</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/mostRecent</TokenIdentifier>
			<Abstract type="html">The most recent CatalyzeEntry</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property CatalyzeEntry *mostRecent</Declaration>
			
			
			<Anchor>//api/name/mostRecent</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setLast60Entries:</TokenIdentifier>
			<Abstract type="html">The NSArray of the last 60 results</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSArray *last60Entries</Declaration>
			
			
			<Anchor>//api/name/last60Entries</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/last60Entries</TokenIdentifier>
			<Abstract type="html">The NSArray of the last 60 results</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSArray *last60Entries</Declaration>
			
			
			<Anchor>//api/name/last60Entries</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/last60Entries</TokenIdentifier>
			<Abstract type="html">The NSArray of the last 60 results</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property NSArray *last60Entries</Declaration>
			
			
			<Anchor>//api/name/last60Entries</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/setDoneType:</TokenIdentifier>
			<Abstract type="html">The type of &quot;done&quot; we have</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property ALL_DONE_TYPE doneType</Declaration>
			
			
			<Anchor>//api/name/doneType</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/doneType</TokenIdentifier>
			<Abstract type="html">The type of &quot;done&quot; we have</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property ALL_DONE_TYPE doneType</Declaration>
			
			
			<Anchor>//api/name/doneType</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PCAMainViewController/doneType</TokenIdentifier>
			<Abstract type="html">The type of &quot;done&quot; we have</Abstract>
			<DeclaredIn>PCAMainViewController.h</DeclaredIn>
			
			<Declaration>@property ALL_DONE_TYPE doneType</Declaration>
			
			
			<Anchor>//api/name/doneType</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/viewDidLoad</TokenIdentifier>
			<Abstract type="html">Called after the view loads. Does basic checks and begins cycling through symptom screens</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)viewDidLoad</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/viewDidLoad</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/startCycle:</TokenIdentifier>
			<Abstract type="html">Starts the symptom cycle to display UI elements to user</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)startCycle:(id)shouldCheckCycle</Declaration>
			<Parameters>
				<Parameter>
					<Name>shouldCheckCycle</Name>
					<Abstract type="html">bool which determines whether to check (don&apos;t if new user)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/startCycle:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/shouldCycleSymptoms</TokenIdentifier>
			<Abstract type="html">Determines if it&apos;s time for the application to show user symptoms to enter.</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (ALL_DONE_TYPE)shouldCycleSymptoms</Declaration>
			
			<ReturnValue><Abstract type="html">ALLDONETYPE enum showing whether user is done entering symptoms, does not need to enter, can enter, etc.</Abstract></ReturnValue>
			<Anchor>//api/name/shouldCycleSymptoms</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/prepareForSegue:sender:</TokenIdentifier>
			<Abstract type="html">Called before executing a segue. Determines what to show when the patient is done</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)prepareForSegue:(id)segue sender:(id)sender</Declaration>
			<Parameters>
				<Parameter>
					<Name>segue</Name>
					<Abstract type="html">to be executed</Abstract>
				</Parameter><Parameter>
					<Name>sender</Name>
					<Abstract type="html">id of sender</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/prepareForSegue:sender:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/didReceiveMemoryWarning</TokenIdentifier>
			<Abstract type="html">Called when a memory warning received</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)didReceiveMemoryWarning</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/didReceiveMemoryWarning</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/showNextSymptom</TokenIdentifier>
			<Abstract type="html">Called to show UI element for next symptom. Moves currentSymptom class variable</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)showNextSymptom</Declaration>
			<Parameters>
				<Parameter>
					<Name>start</Name>
					<Abstract type="html">Symptom to start at (if not showing all symptoms)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/showNextSymptom</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/showSymptomScreen</TokenIdentifier>
			<Abstract type="html">Entry method for UI element creation and operation for symptom screen.</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)showSymptomScreen</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/showSymptomScreen</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/prepareInstructionLabel:</TokenIdentifier>
			<Abstract type="html">Prepares the UI elements which instruct the user on what to do. Changes the text depending on whether the input screen uses &quot;radio&quot; buttons or a slider</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)prepareInstructionLabel:(id)inputType</Declaration>
			<Parameters>
				<Parameter>
					<Name>inputType</Name>
					<Abstract type="html">INPUT_TYPE enum to determine whether to show a slider screen or a radio button screen</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/prepareInstructionLabel:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/prepareSubmitButton:</TokenIdentifier>
			<Abstract type="html">Prepares the submit button for the symptom screen. Changes the selector based on whether the user is inputting data on a slider or on &quot;radio&quot; buttons</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)prepareSubmitButton:(id)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">INPUT_TYPE enum to determine whether to set selector as slider pressed or radio pressed</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/prepareSubmitButton:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/showRadioButtonScreen</TokenIdentifier>
			<Abstract type="html">Main method called from showNextSymptom for symptoms requiring radio buttons</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)showRadioButtonScreen</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/showRadioButtonScreen</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/showSliderScreen</TokenIdentifier>
			<Abstract type="html">Main method called from showNextSymptom for symptoms requiring a slider</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)showSliderScreen</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/showSliderScreen</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/sliderValueChanged:</TokenIdentifier>
			<Abstract type="html">Basic IBAction used to log changing slider values for entering test data</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (IBAction)sliderValueChanged:(id)sender</Declaration>
			
			
			<Anchor>//api/name/sliderValueChanged:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/showPreviousValueSliderPosition</TokenIdentifier>
			<Abstract type="html">Method used to create and place image view on slider to show previously entered value</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)showPreviousValueSliderPosition</Declaration>
			
			
			<Anchor>//api/name/showPreviousValueSliderPosition</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/submitPressedSlider:</TokenIdentifier>
			<Abstract type="html">Target selector method to submit data when submit pressed</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)submitPressedSlider:(id)sender</Declaration>
			<Parameters>
				<Parameter>
					<Name>sender</Name>
					<Abstract type="html">UIButton* reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/submitPressedSlider:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/submitPressedRadio:</TokenIdentifier>
			<Abstract type="html">Target selector method to submit user data from the radio screen. Uses radioref, global reference</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)submitPressedRadio:(id)sender</Declaration>
			<Parameters>
				<Parameter>
					<Name>sender</Name>
					<Abstract type="html">UIButton* reference</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/submitPressedRadio:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/removeSubviews</TokenIdentifier>
			<Abstract type="html">Called before each symptom screen is shown. Clears all UI subviews in the view</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)removeSubviews</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/removeSubviews</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/showConfirmAlert</TokenIdentifier>
			<Abstract type="html">Shows the user a popup alert when they try to submit a score (any score). User can continue with submission or go back to fix a mistake</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)showConfirmAlert</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/showConfirmAlert</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/alertView:clickedButtonAtIndex:</TokenIdentifier>
			<Abstract type="html">Called when the user selects a button in the confirmation popup</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)alertView:(id)alertView clickedButtonAtIndex:(id)buttonIndex</Declaration>
			<Parameters>
				<Parameter>
					<Name>alertView</Name>
					<Abstract type="html">UIAlertView* reference to the alert</Abstract>
				</Parameter><Parameter>
					<Name>buttonIndex</Name>
					<Abstract type="html">NSInteger representing which button user pressed on alert</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/alertView:clickedButtonAtIndex:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/updateEntry</TokenIdentifier>
			<Abstract type="html">Called when user continues through confirmation popup. Updates the esasDictionary.</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)updateEntry</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/updateEntry</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/saveEntryToCatalyze</TokenIdentifier>
			<Abstract type="html">Called before all done segue. Creates the esasEntry and saves it to the backend</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)saveEntryToCatalyze</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/saveEntryToCatalyze</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/checkUrgentSymptoms</TokenIdentifier>
			<Abstract type="html">Checks urgent symptoms.
Automatically makes a symptom urgent if it is over 9 or the highest option on the radio dials
Records a dictionary of urgent symptoms inside the dictionary of symptoms, since esasEntry has an &quot;urgent&quot; object
Each entry in the dictionary is either 0 (not urgent), 1 (slightly), or 2 (very)
These are determined in two ways:
Any slider symptom above 9 is automatically a 1, if it&apos;s 10 it&apos;s automatically a 2
Any radio symptom at highest level is a 1, but TODO check and see if this should be 2 instead
Any slider symtom &gt; 1 SD above mean is a 1
Any slider symptom &gt; 2 SD above mean is a 2</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)checkUrgentSymptoms</Declaration>
			
			<ReturnValue><Abstract type="html">void</Abstract></ReturnValue>
			<Anchor>//api/name/checkUrgentSymptoms</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/executeQuery</TokenIdentifier>
			<Abstract type="html">Queries the last 60 user entries
Stores all 60 for use in statistics later
Finds and stores most recent for use showing previous value
Begins the symptom UI cycle</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (void)executeQuery</Declaration>
			
			
			<Anchor>//api/name/executeQuery</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PCAMainViewController/findMostRecent:</TokenIdentifier>
			<Abstract type="html">Finds the most recent entry in the query results</Abstract>
			<DeclaredIn>PCAMainViewController.m</DeclaredIn>
			
			<Declaration>- (CatalyzeEntry *)findMostRecent:(id)result</Declaration>
			<Parameters>
				<Parameter>
					<Name>result</Name>
					<Abstract type="html">NSArray returned by Catalyze query function</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CatalyzeEntry* most recent entry</Abstract></ReturnValue>
			<Anchor>//api/name/findMostRecent:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
        
        
	</File>
</Tokens>