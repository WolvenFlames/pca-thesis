<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CatalyzeEntry.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CatalyzeEntry</TokenIdentifier>
			<Abstract type="html">CatalyzeEntry is the base class of CatalyzeUser.  It is also the base class for custom
classes on the catalyze.io API.  A CatalyzeEntry is initialized with the name of the custom
class it is associated with and is the container for an Entry in that class.</Abstract>
			<DeclaredIn>CatalyzeEntry.h</DeclaredIn>
            
			
			<NodeRef refid="21"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeEntry/entryWithClassName:</TokenIdentifier>
			<Abstract type="html">Initializes a CatalyzeEntry with a class name.  This class name is used to lookup
URL routes.  Valid class names are those which are named after a custom class on the
catalyze.io API.</Abstract>
			<DeclaredIn>CatalyzeEntry.h</DeclaredIn>
			
			<Declaration>+ (CatalyzeEntry *)entryWithClassName:(id)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">a valid class name representing the type of CatalyzeEntry being created</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a newly created CatalyzeEntry with the given class name</Abstract></ReturnValue>
			<Anchor>//api/name/entryWithClassName:</Anchor>
            <NodeRef refid="21"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CatalyzeEntry/entryWithClassName:dictionary:</TokenIdentifier>
			<Abstract type="html">Initializes a CatalyzeEntry with a class name.  This class name is used to lookup
URL routes.  Valid class names are those which are named after a custom class on the
catalyze.io API. The dictionary may contain any key value pairs, such as predefined
fields like firstname, lastname or custom fields.</Abstract>
			<DeclaredIn>CatalyzeEntry.h</DeclaredIn>
			
			<Declaration>+ (CatalyzeEntry *)entryWithClassName:(id)className dictionary:(id)dictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">a valid class name representing the type of CatalyzeEntry being created</Abstract>
				</Parameter><Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">key value pairs to be stored with the CatalyzeEntry on the next network request.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a newly created CatalyzeEntry with the given class name and key value pairs stored from the dictionary</Abstract></ReturnValue>
			<Anchor>//api/name/entryWithClassName:dictionary:</Anchor>
            <NodeRef refid="21"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CatalyzeEntry/initWithClassName:</TokenIdentifier>
			<Abstract type="html">Constructs a new instance of CatalzeObject with the given class name.  See [CatalyzeEntry objectWithClassName:]</Abstract>
			<DeclaredIn>CatalyzeEntry.h</DeclaredIn>
			
			<Declaration>- (id)initWithClassName:(id)newClassName</Declaration>
			<Parameters>
				<Parameter>
					<Name>newClassName</Name>
					<Abstract type="html">a valid class name representing the type of CatalyzeEntry being created</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the newly created instance of CatalyzeEntry</Abstract></ReturnValue>
			<Anchor>//api/name/initWithClassName:</Anchor>
            <NodeRef refid="21"/>
		</Token>
		
        
        
	</File>
</Tokens>